on:
  pull_request:
  push:
    branches: [main, staging, trying]
    tags:
      - "v*.*.*"

name: CI

env:
  CARGO_NET_RETRY: 3
  CARGO_HTTP_CHECK_REVOKE: false

jobs:
  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run ShellCheck
        uses: azohra/shell-linter@v0.3.0

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: EmbarkStudios/cargo-deny-action@v1

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix
        id: generate-matrix
        run: |
          if [[ -z "${commit_message}" ]]; then
            bors_args=()
          else
            bors_args="$(echo "${commit_message}" | sed -E 's/^Try #[0-9]+:\s+//')"
            declare -a "bors_args=(${bors_args})"
          fi

          targets=()
          index=0
          while [[ "${bors_args[$index]-}" == --target ]]; do
            index=$(expr $index + 1)
            targets+=("${bors_args[$index]}")
            index=$(expr $index + 1)
          done

          selects=()
          for target in "${targets[@]}"; do
            base=$(echo "${target}" | cut -d '.' -f 1)
            sub=$(echo "${target}" | cut -d '.' -sf 2)
            selects+=("select(.target | test(\"${base}\")) and if \"${sub}\" != \"\" then .sub == \"${sub}\" else .sub == null end")
          done
          query=$(printf " or %s" "${selects[@]}")
          query="${query:4}"

          if [[ "${#targets[@]}" != "0" ]]; then
            echo "Only running targets matching '${targets[@]}'."
            matrix=$(
              yq --output-format json <<< "${matrix}" | jq '[.[] | select('"${query}"')]'
            )
          else
            echo 'Running all targets.'
            matrix="$(yq --output-format json <<< "${matrix}")"
          fi

          jq -C '[.[] | . += {"pretty": ([.target] + [select(.sub != null).sub]) | join(":")}]' <<< "${matrix}"

          echo "::set-output name=matrix::$(jq -c '[.[] | . += {"pretty": ([.target] + [select(.sub != null).sub]) | join(":")}]' <<< "${matrix}")"
        env:
          commit_message: >
            ${{
              ((
                startsWith(github.event.head_commit.message, 'Try #') &&
                github.event.head_commit.author.username == 'bors[bot]'
              ) && github.event.head_commit.message) || ''
            }}
          matrix: |
            - { target: aarch64-linux-android,            os: ubuntu-latest,  cpp: 1,           std: 1, run: 1, runners: qemu-user }


  build:
    name: target (${{ matrix.pretty }},${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [shellcheck,  generate-matrix]
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    outputs:
      has-image: ${{ steps.prepare-meta.outputs.has-image }}
      images: ${{ steps.build-docker-image.outputs.images && fromJSON(steps.build-docker-image.outputs.images)  }}
      coverage-artifact: ${{ steps.cov.outputs.artifact-name }}
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-rust

      - name: Set up Docker Buildx
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v1

      - name: Build xtask
        run: cargo build -p xtask

      - name: Prepare Meta
        id: prepare-meta
        timeout-minutes: 60
        run: cargo xtask ci-job prepare-meta "${TARGET}${SUB:+.$SUB}"
        env:
          TARGET: ${{ matrix.target }}
          SUB: ${{ matrix.sub }}
        shell: bash

      - name: LLVM instrument coverage
        id: cov
        uses: ./.github/actions/cargo-llvm-cov
        if: steps.prepare-meta.outputs.has-image  && steps.prepare-meta.outputs.test-variant != 'zig'
        with:
          name: cross-${{matrix.pretty}}

      - name: Install cross
        if: matrix.deploy
        run: cargo install --path . --force --debug

      - name: Docker Meta
        if: steps.prepare-meta.outputs.has-image
        id: docker-meta
        uses: docker/metadata-action@v4
        with:
          images: |
            name=${{ steps.prepare-meta.outputs.image }}
          labels: |
            ${{ fromJSON(steps.prepare-meta.outputs.labels) }}
      - name: Build Docker image
        id: build-docker-image
        if: steps.prepare-meta.outputs.has-image
        timeout-minutes: 120
        run: cargo xtask build-docker-image -v "${TARGET}${SUB:+.$SUB}"
        env:
          TARGET: ${{ matrix.target }}
          SUB: ${{ matrix.sub }}
          LABELS: ${{ steps.docker-meta.outputs.labels }}
          LATEST: ${{ needs.check.outputs.is-latest || 'false' }}
        shell: bash
      - name: Set Docker image for test
        if: steps.prepare-meta.outputs.has-image
        run: |
          TARGET_VAR="cross_target_${TARGET//-/_}_image"
          echo "${TARGET_VAR^^}=${IMAGE}" | tee -a "${GITHUB_ENV}"
        env:
          TARGET: ${{ matrix.target }}
          IMAGE: ${{ steps.build-docker-image.outputs.image }}
        shell: bash

      - name: Login to GitHub Container Registry
        if: steps.prepare-meta.outputs.has-image
        uses: docker/login-action@v1
        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Push image to GitHub Container Registry
        if: >
          steps.prepare-meta.outputs.has-image && (
            github.ref == format('refs/heads/{0}', github.event.repository.default_branch) ||
            startsWith(github.ref, 'refs/tags/v')
          )
        run: cargo xtask build-docker-image -v --push "${TARGET}${SUB:+.$SUB}"
        env:
          TARGET: ${{ matrix.target }}
          SUB: ${{ matrix.sub }}
          LABELS: ${{ steps.docker-meta.outputs.labels }}
          LATEST: ${{ needs.check.outputs.is-latest || 'false' }}
        shell: bash

  conclusion:
    needs: [shellcheck,  generate-matrix, build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Result
        run: |
          jq -C <<< "${needs}"

          # Check if all needs were successful or skipped.
          "$(jq -r 'all(.result as $result | (["success", "skipped"] | contains([$result])))' <<< "${needs}")"
        env:
          needs: ${{ toJson(needs) }}
